package com.rojassac.canchaya.ui.admin

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.rojassac.canchaya.data.model.EstadoSuscripcion
import com.rojassac.canchaya.data.model.Plan
import com.rojassac.canchaya.data.model.Subscription
import com.rojassac.canchaya.data.repository.CodigoRepository // ‚úÖ NUEVO IMPORT
import com.rojassac.canchaya.data.repository.SubscriptionRepository
import com.rojassac.canchaya.data.repository.ValidacionCodigoResult // ‚úÖ NUEVO IMPORT
import kotlinx.coroutines.launch

class AdminViewModel : ViewModel() {
    private val subscriptionRepository = SubscriptionRepository()
    private val codigoRepository = CodigoRepository() // ‚úÖ NUEVO: Instancia del repositorio

    companion object {
        private const val TAG = "AdminViewModel"
    }

    // Planes disponibles
    private val _planes = MutableLiveData<List<Plan>>()
    val planes: LiveData<List<Plan>> = _planes

    // Suscripci√≥n actual
    private val _suscripcionActual = MutableLiveData<Subscription?>()
    val suscripcionActual: LiveData<Subscription?> = _suscripcionActual

    // Plan actual
    private val _planActual = MutableLiveData<Plan?>()
    val planActual: LiveData<Plan?> = _planActual

    // ‚úÖ NUEVO: Estado del cambio de plan
    private val _cambioPlanExitoso = MutableLiveData<Boolean>()
    val cambioPlanExitoso: LiveData<Boolean> = _cambioPlanExitoso

    // ========== ‚úÖ NUEVO: VALIDACI√ìN DE C√ìDIGO DE INVITACI√ìN ==========
    private val _validacionCodigo = MutableLiveData<ValidacionCodigoResult>()
    val validacionCodigo: LiveData<ValidacionCodigoResult> = _validacionCodigo

    private val _isValidatingCodigo = MutableLiveData<Boolean>()
    val isValidatingCodigo: LiveData<Boolean> = _isValidatingCodigo
    // ========== FIN NUEVO ==========

    /**
     * Carga todos los planes disponibles
     */
    fun cargarPlanes() {
        viewModelScope.launch {
            try {
                val resultado = subscriptionRepository.obtenerPlanes()
                if (resultado.isSuccess) {
                    _planes.postValue(resultado.getOrNull() ?: emptyList())
                    Log.d(TAG, "‚úÖ Planes cargados: ${resultado.getOrNull()?.size}")
                } else {
                    Log.e(TAG, "‚ùå Error al cargar planes", resultado.exceptionOrNull())
                    _planes.postValue(emptyList())
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error inesperado al cargar planes", e)
                _planes.postValue(emptyList())
            }
        }
    }

    /**
     * Carga la suscripci√≥n activa del usuario
     */
    fun cargarSuscripcionActual(userId: String) {
        viewModelScope.launch {
            try {
                val resultado = subscriptionRepository.obtenerSuscripcionActiva(userId)
                if (resultado.isSuccess) {
                    val suscripcion = resultado.getOrNull()
                    _suscripcionActual.postValue(suscripcion)
                    // Cargar el plan asociado
                    suscripcion?.let {
                        cargarPlan(it.planId)
                    }
                } else {
                    Log.e(TAG, "‚ùå Error al obtener suscripci√≥n", resultado.exceptionOrNull())
                    _suscripcionActual.postValue(null)
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error inesperado al cargar suscripci√≥n", e)
                _suscripcionActual.postValue(null)
            }
        }
    }

    /**
     * Carga un plan espec√≠fico por ID
     */
    private fun cargarPlan(planId: String) {
        viewModelScope.launch {
            try {
                val resultado = subscriptionRepository.obtenerPlan(planId)
                if (resultado.isSuccess) {
                    _planActual.postValue(resultado.getOrNull())
                } else {
                    Log.e(TAG, "‚ùå Error al obtener plan", resultado.exceptionOrNull())
                    _planActual.postValue(null)
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error inesperado al cargar plan", e)
                _planActual.postValue(null)
            }
        }
    }

    /**
     * ‚úÖ MEJORADO: Cambia el plan de suscripci√≥n con feedback
     */
    fun cambiarPlan(userId: String, nuevoPlanId: String) {
        viewModelScope.launch {
            try {
                val suscripcionActual = subscriptionRepository.obtenerSuscripcionActiva(userId)
                    .getOrNull()

                if (suscripcionActual != null) {
                    // Actualizar suscripci√≥n existente
                    val resultado = subscriptionRepository.cambiarPlan(
                        suscripcionActual.id,
                        nuevoPlanId
                    )

                    if (resultado.isSuccess) {
                        Log.d(TAG, "‚úÖ Plan cambiado exitosamente")
                        _cambioPlanExitoso.postValue(true)
                        cargarSuscripcionActual(userId)
                    } else {
                        Log.e(TAG, "‚ùå Error al cambiar plan", resultado.exceptionOrNull())
                        _cambioPlanExitoso.postValue(false)
                    }
                } else {
                    // Crear nueva suscripci√≥n
                    val nuevaSuscripcion = Subscription(
                        userId = userId,
                        planId = nuevoPlanId,
                        estado = EstadoSuscripcion.ACTIVA,
                        fechaInicio = System.currentTimeMillis(),
                        fechaVencimiento = System.currentTimeMillis() + (30L * 24 * 60 * 60 * 1000),
                        autoRenovacion = true
                    )

                    val resultado = subscriptionRepository.crearSuscripcion(nuevaSuscripcion)
                    if (resultado.isSuccess) {
                        Log.d(TAG, "‚úÖ Suscripci√≥n creada exitosamente")
                        _cambioPlanExitoso.postValue(true)
                        cargarSuscripcionActual(userId)
                    } else {
                        Log.e(TAG, "‚ùå Error al crear suscripci√≥n", resultado.exceptionOrNull())
                        _cambioPlanExitoso.postValue(false)
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error inesperado al cambiar plan", e)
                _cambioPlanExitoso.postValue(false)
            }
        }
    }

    /**
     * Cancela la suscripci√≥n actual
     */
    fun cancelarSuscripcion(userId: String, motivo: String) {
        viewModelScope.launch {
            try {
                val suscripcion = subscriptionRepository.obtenerSuscripcionActiva(userId)
                    .getOrNull()

                if (suscripcion != null) {
                    val resultado = subscriptionRepository.cancelarSuscripcion(
                        suscripcion.id,
                        motivo
                    )

                    if (resultado.isSuccess) {
                        Log.d(TAG, "‚úÖ Suscripci√≥n cancelada")
                        cargarSuscripcionActual(userId)
                    } else {
                        Log.e(TAG, "‚ùå Error al cancelar suscripci√≥n", resultado.exceptionOrNull())
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error inesperado al cancelar suscripci√≥n", e)
            }
        }
    }

    // ========== ‚úÖ NUEVO: FUNCIONES DE VALIDACI√ìN DE C√ìDIGO ==========

    /**
     * Valida un c√≥digo de invitaci√≥n
     * @param codigo El c√≥digo a validar (ser√° convertido a uppercase)
     */
    fun validarCodigoInvitacion(codigo: String) {
        viewModelScope.launch {
            try {
                _isValidatingCodigo.postValue(true)
                Log.d(TAG, "üîÑ Iniciando validaci√≥n de c√≥digo: $codigo")

                val resultado = codigoRepository.validarCodigoInvitacion(codigo.trim().uppercase())
                _validacionCodigo.postValue(resultado)

                Log.d(TAG, if (resultado.exito) {
                    "‚úÖ C√≥digo validado exitosamente"
                } else {
                    "‚ùå Error en validaci√≥n: ${resultado.mensaje}"
                })
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error inesperado al validar c√≥digo", e)
                _validacionCodigo.postValue(
                    ValidacionCodigoResult(
                        exito = false,
                        mensaje = "Error inesperado: ${e.message}"
                    )
                )
            } finally {
                _isValidatingCodigo.postValue(false)
            }
        }
    }

    /**
     * Resetea el estado de validaci√≥n de c√≥digo
     * Llamar despu√©s de procesar el resultado
     */
    fun resetValidacionCodigo() {
        _validacionCodigo.postValue(null)
    }

    // ========== FIN NUEVO ==========
}
